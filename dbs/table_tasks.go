package dbs

import (
	"game-mining-server/configs"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

type Task struct {
	Id          string `gorm:"primaryKey;type:varchar(255)" json:"id"` // task unique id, generated by uuid4
	Uid         int64  `gorm:"primaryKey;type:bigint" json:"uid"`      // task user id
	CreatedAt   int64  `gorm:"autoCreateTime:milli" json:"createdAt"`  // created ts: 1670400478555
	UpdatedAt   int64  `gorm:"autoUpdateTime:milli" json:"-"`          // updated ts: 1670400478555
	TaskGroup   string `gorm:"type:varchar(255)" json:"taskGroup"`     // task group: social, wallet, invite
	TaskType    string `gorm:"type:varchar(255)" json:"taskType"`      // task type: social_subscribe_tg_channel
	Status      int    `gorm:"type:int" json:"status"`                 // task status: 0: created, 1: claimable, 2: claimed
	RewardPoint int64  `gorm:"type:bigint" json:"rewardPoint"`         // rewardPoint for this task
}

func (u *Task) TableName() string {
	return "tasks"
}

// TaskFindByUid find a user's task by uid
func (s *Service) TaskFindByUid(uid int64) (*Task, error) {
	var task Task
	if e := s.DBInstance.Where("uid = ?", uid).First(&task).Error; e != nil {
		return nil, e
	} else {
		return &task, nil
	}
}

// TaskFindAllOrCreateSocial get user's social tasks, create lis
func (s *Service) TaskFindAllOrCreateSocial(uid int64) ([]*Task, error) {
	var socialTasks []*Task
	e := s.DBInstance.Transaction(func(tx *gorm.DB) error {
		result := tx.Where("uid = ? AND task_group = ?", uid, configs.TaskGroupSocial).
			Order("created_at asc").Find(&socialTasks)
		if e0 := result.Error; e0 != nil {
			return e0
		}
		if socialTasks == nil || len(socialTasks) == 0 {
			socialTasks = createUserInitTasks(uid)
			return tx.Create(socialTasks).Error
		} else {
			return nil
		}
	})
	return socialTasks, e
}

func createSocialTask(uid int64, taskType string) *Task {
	return &Task{
		Id:          uuid.New().String(),
		Uid:         uid,
		TaskGroup:   configs.TaskGroupSocial,
		TaskType:    taskType,
		Status:      configs.TaskStatusClaimable, // social tasks is claimable by default
		RewardPoint: configs.TaskSocialBaseRewardPoint,
	}
}

func createUserInitTasks(uid int64) []*Task {
	socialSubscribeTgChannelTask := createSocialTask(uid, configs.TaskTypeSocialSubscribeTgChannel)
	socialFollowCfOnXTask := createSocialTask(uid, configs.TaskTypeSocialFollowCfOnX)
	socialRtAnnTask := createSocialTask(uid, configs.TaskTypeSocialRtAnn)
	return []*Task{socialSubscribeTgChannelTask, socialFollowCfOnXTask, socialRtAnnTask}
}

func (s *Service) TaskClaim(id string, uid int64, fromStatus int, toStatus int) (*Point, error) {
	var point *Point
	e := s.DBInstance.Transaction(func(tx *gorm.DB) error {
		var task Task
		if e0 := tx.Where("id = ? AND uid = ? AND status = ?", id, uid, fromStatus).First(&task).Error; e0 != nil {
			return e0
		}
		task.Status = toStatus
		if e1 := tx.Save(&task).Error; e1 != nil {
			return e1
		}
		if _point, e2 := s.PointClaimTask(tx, uid, task.RewardPoint); e2 != nil {
			return e2
		} else {
			point = _point
		}
		return nil
	})
	return point, e
}
